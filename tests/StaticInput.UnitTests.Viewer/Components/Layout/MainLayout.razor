@inherits LayoutComponentBase

@inject NavigationManager Navigation

<MudThemeProvider Theme="@customTheme" />

<MudLayout Style="height:100vh">
    <MudDrawerContainer>
        <MudDrawer Open Fixed Elevation="1" Class="px-4" Style="width:auto"
                   Breakpoint="Breakpoint.None" Variant="DrawerVariant.Persistent" ClipMode="DrawerClipMode.Docked">
            <MudDrawerHeader>
                <MudText Typo="Typo.h6">Static Input Tests</MudText>
            </MudDrawerHeader>
            <MudNavMenu>
                @foreach (var component in _testComponents.Keys)
                {
                    <MudStaticNavGroup Title="@component">
                       @foreach (var test in _testComponents[component])
                        {
                            <MudNavLink @key="test.Name" Match="NavLinkMatch.All" Icon="@Icons.Material.Filled.List"
                                        Href="@Navigation.GetUriWithQueryParameter("Test", test.Name)">
                                @test.Name
                            </MudNavLink>
                        }
                    </MudStaticNavGroup>

                }
            </MudNavMenu>
        </MudDrawer>
    </MudDrawerContainer>

    <MudMainContent Class="mud-height-full">
        <MudContainer Class="mud-height-full" MaxWidth="MaxWidth.Medium">
            <CascadingValue TValue="Dictionary<string, List<Type>>" IsFixed="true" Value="@_testComponents">
                @Body
            </CascadingValue>
        </MudContainer>
    </MudMainContent>
</MudLayout>

@code {
    MudTheme customTheme = new MudTheme()
    {
        PaletteLight = new PaletteLight() 
        { 
            Primary = Colors.Teal.Default
        }
    };

    private Dictionary<string, List<Type>> _testComponents = new();
    
    protected override void OnInitialized()
    {
        var availableComponentTypes = GetTestComponentTypes().ToArray();


        foreach (var item in availableComponentTypes)
        {
            var component = item.Namespace!.Split('.').Last();

            if (!_testComponents.TryAdd(component, [item]))
                _testComponents[component].Add(item);
        }

        base.OnInitialized();
    }

    private IEnumerable<Type> GetTestComponentTypes()
    {
        foreach (var type in typeof(Program).Assembly.GetTypes().OrderBy(x => x.Name))
        {
            if (!type.Name.Contains("Test"))
                continue;
            if (type.Name.StartsWith("<"))
                continue;
            if (!type.GetInterfaces().Contains(typeof(IComponent)))
                continue;
            yield return type;
        }
    }
}