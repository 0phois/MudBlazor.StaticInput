@page "/Account/Login"

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@using StaticSample.Data

@inject SignInManager<ApplicationUser> SignInManager
@inject ILogger<Login> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

<PageTitle>Log in</PageTitle>

<MudPaper Elevation="5" Class="pa-16">
    <MudGrid Justify="Justify.Center">
        <MudItem xs="12">
            <MudStack Row="true" Spacing="2" AlignItems="AlignItems.Center">
                <MudIcon Icon="@Icons.Custom.Brands.MudBlazor" Color="Color.Primary" />
                <MudText Typo="Typo.h6" Color="Color.Primary" Style="font-weight:700;">Static Input</MudText>
            </MudStack>
        </MudItem>
        <MudItem>
            <StatusMessage Message="@errorMessage" />
            <EditForm Model="Input" method="post" OnValidSubmit="LoginUser" FormName="login">
                <DataAnnotationsValidator />

                <MudText Typo="Typo.h4">Log in to your Account</MudText>
                <MudText Typo="Typo.caption">Welcome back! Select method to log in:</MudText>
                
                <MudDivider Class="my-4" DividerType="DividerType.Middle" Style=@($"border-color:{Colors.Teal.Darken4}") />
                
                <MudStack Row="true" Justify="Justify.SpaceEvenly" Spacing="1">
                    <MudStaticButton  StartIcon="@Icons.Custom.Brands.Google" IconColor="Color.Error" Variant="Variant.Filled" DropShadow="false" Disabled="true"> Google </MudStaticButton>
                    <MudStaticButton StartIcon="@Icons.Custom.Brands.Facebook" IconColor="Color.Info" Variant="Variant.Filled" DropShadow="false" Disabled="true">Facebook</MudStaticButton>
                </MudStack>

                <MudStack Row="true" Class="ma-4" Justify="Justify.SpaceAround" AlignItems="AlignItems.Center" Wrap="Wrap.Wrap">
                    <MudDivider Class="d-flex flex-grow-1" DividerType="DividerType.Middle" Style=@($"border-color:{Colors.Teal.Darken4}") />
                    <MudText Typo="Typo.caption">or continue with email</MudText>
                    <MudDivider Class="d-flex flex-grow-1" DividerType="DividerType.Middle" Style=@($"border-color:{Colors.Teal.Darken4}") />
                </MudStack>

                <MudStaticTextField @bind-Value="@Input.Email" Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Outlined.Email" autocomplete="username"
                                    Class="pb-2" Margin="Margin.Dense" Variant="Variant.Outlined" Label="Email" For="() => Input.Email" />

                <MudStaticTextField @bind-Value="@Input.Password" Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Outlined.VisibilityOff" AdornmentClickFunction="showPassword"
                                    autocomplete="current-password" Class="pb-2" Margin="Margin.Dense" Variant="Variant.Outlined" Label="Password"
                                    InputType="InputType.Password" For="() => Input.Password" />

                <MudStack Row="true" AlignItems="AlignItems.Center" Justify="Justify.SpaceBetween">
                    <MudStaticSwitch @bind-Value="Input.RememberMe" Color="Color.Primary" Label="Remember Me" Typo="Typo.body2"/>
                    <MudLink Href="Account/ForgotPassword" Typo="Typo.body2" Color="Color.Primary"><b>Forgot password?</b></MudLink>
                </MudStack>

                <MudStaticButton Class="my-4" FormAction="FormAction.Submit" Color="Color.Primary" Variant="Variant.Filled" FullWidth="true">Log In</MudStaticButton>
                
                <MudStack Row="true" AlignItems="AlignItems.Center" Justify="Justify.Center" Spacing="2">
                    <MudText Typo="Typo.body2">Don't have an account?</MudText>
                    <MudLink Href="/Account/Register" Typo="Typo.body2" Color="Color.Primary"><b>Create an account</b></MudLink>
                </MudStack>

                @if (!string.IsNullOrWhiteSpace(queryString))
                {
                    <MudLink Class="d-flex mud-width-full justify-center my-4" Href="@queryString" Typo="Typo.body2" Color="Color.Error"><b>Confirm email address</b></MudLink>
                }
            </EditForm>
        </MudItem>
    </MudGrid>
</MudPaper>

@code {
    private string? queryString;
    private string? errorMessage;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm(FormName = "login")]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (HttpMethods.IsGet(HttpContext.Request.Method))
        {
            // Clear the existing external cookie to ensure a clean login process
            await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);
        }
    }

    public async Task LoginUser()
    {
        // This doesn't count login failures towards account lockout
        // To enable password failures to trigger account lockout, set lockoutOnFailure: true
        var result = await SignInManager.PasswordSignInAsync(Input.Email, Input.Password, Input.RememberMe, lockoutOnFailure: false);
        if (result.Succeeded)
        {
            Logger.LogInformation("User logged in.");
            RedirectManager.RedirectTo(ReturnUrl);
        }
        else if (result.RequiresTwoFactor)
        {
            RedirectManager.RedirectTo(
                "Account/LoginWith2fa",
                new() { ["returnUrl"] = ReturnUrl, ["rememberMe"] = Input.RememberMe });
        }
        else if (result.IsLockedOut)
        {
            Logger.LogWarning("User account locked out.");
            RedirectManager.RedirectTo("Account/Lockout");
        }
        else
        {
            errorMessage = "Error: Invalid login attempt.";

            Dictionary<string, object?> query = new() { ["email"] = Input.Email, ["returnUrl"] = ReturnUrl };

            queryString = NavigationManager.GetUriWithQueryParameters("Account/RegisterConfirmation", query);
        }
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        public string Email { get; set; } = "";

        [Required]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [Display(Name = "Remember me?")]
        public bool RememberMe { get; set; }
    }
}

<script>
    let timeoutId;

    function showPassword(inputElement, button) {
        if (inputElement.type === 'password') {
            inputElement.type = 'text';
            clearTimeout(timeoutId);
            timeoutId = setTimeout(function () {
                inputElement.type = 'password';
            }, 5000);
        } else {
            inputElement.type = 'password';
            clearTimeout(timeoutId);
        }
    }
</script>