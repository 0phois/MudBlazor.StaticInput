@page "/Account/Register"

@using System.ComponentModel.DataAnnotations
@using System.Text
@using System.Text.Encodings.Web
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using StaticSample.Data

@inject UserManager<ApplicationUser> UserManager
@inject IUserStore<ApplicationUser> UserStore
@inject SignInManager<ApplicationUser> SignInManager
@inject IEmailSender<ApplicationUser> EmailSender
@inject ILogger<Register> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

<PageTitle>Register</PageTitle>

<MudPaper Elevation="5" Class="pa-16">
    <MudGrid Justify="Justify.Center">
        <MudItem xs="12">
            <MudStack Row="true" Spacing="2" AlignItems="AlignItems.Center">
                <MudIcon Icon="@Icons.Custom.Brands.MudBlazor" Color="Color.Primary" />
                <MudText Typo="Typo.h6" Color="Color.Primary" Style="font-weight:700;">Static Input</MudText>
            </MudStack>
        </MudItem>
        <MudItem>
            <StatusMessage Message="@ErrorMessage" />
            <EditForm Model="Input" asp-route-returnUrl="@ReturnUrl" method="post" OnValidSubmit="RegisterUser" FormName="register">
                <DataAnnotationsValidator />

                <MudText Typo="Typo.h4" Class="pr-2">Create a new Account</MudText>
                <MudText Typo="Typo.caption">Select a registration method:</MudText>

                <MudDivider Class="my-4" DividerType="DividerType.Middle" Style=@($"border-color:{Colors.Teal.Darken4}") />

                <MudStack Row="true" Justify="Justify.SpaceEvenly" Spacing="1">
                    <MudStaticButton StartIcon="@Icons.Custom.Brands.Google" IconColor="Color.Error" Variant="Variant.Filled" DropShadow="false" Disabled="true"> Google </MudStaticButton>
                    <MudStaticButton StartIcon="@Icons.Custom.Brands.Facebook" IconColor="Color.Info" Variant="Variant.Filled" DropShadow="false" Disabled="true">Facebook</MudStaticButton>
                </MudStack>

                <MudStack Row="true" Class="ma-4" Justify="Justify.SpaceAround" AlignItems="AlignItems.Center" Wrap="Wrap.Wrap">
                    <MudDivider Class="d-flex flex-grow-1" DividerType="DividerType.Middle" Style=@($"border-color:{Colors.Teal.Darken4}") />
                    <MudText Typo="Typo.caption">or continue with email</MudText>
                    <MudDivider Class="d-flex flex-grow-1" DividerType="DividerType.Middle" Style=@($"border-color:{Colors.Teal.Darken4}") />
                </MudStack>

                <MudStaticTextField @bind-Value="@Input.Email" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Outlined.Email" autocomplete="username"
                                    Class="pb-2" Margin="Margin.Dense" Variant="Variant.Outlined" Placeholder="static@mail.com" For="() => Input.Email" />

                <MudStaticTextField @bind-Value="@Input.Password" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Outlined.Lock" autocomplete="new-password"
                                    Class="pb-2" Margin="Margin.Dense" Variant="Variant.Outlined" Placeholder="Password" InputType="InputType.Password" For="() => Input.Password" />

                <MudStaticTextField @bind-Value="@Input.ConfirmPassword" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Outlined.Lock" autocomplete="new-password"
                                    Class="pb-2" Margin="Margin.Dense" Variant="Variant.Outlined" Placeholder="Confirm Password" InputType="InputType.Password" For="() => Input.ConfirmPassword" />

                <MudStaticButton Class="mt-1 mb-4" FormAction="FormAction.Submit" Color="Color.Primary" Variant="Variant.Filled" FullWidth="true">Register</MudStaticButton>

                <MudStack Row="true" AlignItems="AlignItems.Center" Justify="Justify.Center" Spacing="2">
                    <MudText Typo="Typo.body2">Already have an account?</MudText>
                    <MudLink Href="/Account/Login" Typo="Typo.body2" Color="Color.Primary"><b>Log in to account</b></MudLink>
                </MudStack>

            </EditForm>
        </MudItem>
    </MudGrid>
</MudPaper>

@code {
    private IEnumerable<IdentityError>? identityErrors;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    private string? ErrorMessage => identityErrors is null ? null : $"Error: {string.Join(", ", identityErrors.Select(error => error.Description))}";

    protected override void OnInitialized()
    {
        Input ??= new();

        base.OnInitialized();
    }

    public async Task RegisterUser(EditContext editContext)
    {
        var user = CreateUser();

        await UserStore.SetUserNameAsync(user, Input.Email, CancellationToken.None);
        var emailStore = GetEmailStore();
        await emailStore.SetEmailAsync(user, Input.Email, CancellationToken.None);
        var result = await UserManager.CreateAsync(user, Input.Password);

        if (!result.Succeeded)
        {
            identityErrors = result.Errors;
            return;
        }

        Logger.LogInformation("User created a new account with password.");

        var userId = await UserManager.GetUserIdAsync(user);
        var code = await UserManager.GenerateEmailConfirmationTokenAsync(user);
        code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));
        var callbackUrl = NavigationManager.GetUriWithQueryParameters(
            NavigationManager.ToAbsoluteUri("Account/ConfirmEmail").AbsoluteUri,
            new Dictionary<string, object?> { ["userId"] = userId, ["code"] = code, ["returnUrl"] = ReturnUrl });

        await EmailSender.SendConfirmationLinkAsync(user, Input.Email, HtmlEncoder.Default.Encode(callbackUrl));

        if (UserManager.Options.SignIn.RequireConfirmedAccount)
        {
            RedirectManager.RedirectTo(
                "Account/RegisterConfirmation",
                new() { ["email"] = Input.Email, ["returnUrl"] = ReturnUrl });
        }

        await SignInManager.SignInAsync(user, isPersistent: false);
        RedirectManager.RedirectTo(ReturnUrl);
    }

    private ApplicationUser CreateUser()
    {
        try
        {
            return Activator.CreateInstance<ApplicationUser>();
        }
        catch
        {
            throw new InvalidOperationException($"Can't create an instance of '{nameof(ApplicationUser)}'. " +
                $"Ensure that '{nameof(ApplicationUser)}' is not an abstract class and has a parameterless constructor.");
        }
    }

    private IUserEmailStore<ApplicationUser> GetEmailStore()
    {
        if (!UserManager.SupportsUserEmail)
        {
            throw new NotSupportedException("The default UI requires a user store with email support.");
        }
        return (IUserEmailStore<ApplicationUser>)UserStore;
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        [Display(Name = "Email")]
        public string Email { get; set; } = "";

        [Required]
        [StringLength(100, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 6)]
        [DataType(DataType.Password)]
        [Display(Name = "Password")]
        public string Password { get; set; } = "";

        [DataType(DataType.Password)]
        [Display(Name = "Confirm password")]
        [Compare("Password", ErrorMessage = "The password and confirmation password do not match.")]
        public string ConfirmPassword { get; set; } = "";
    }
}
