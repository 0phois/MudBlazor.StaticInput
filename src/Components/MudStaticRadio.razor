@namespace MudBlazor.StaticInput

@typeparam T
@inherits MudRadio<T>

<MudInputControl Class="@Classname" Style="@Style" Error="@HasErrors" ErrorText="@GetErrorText()" Required="@Required">
    <InputContent>
        <label class="@LabelClassname" style="@Style" id="@_elementId" @onclick:stopPropagation="@StopClickPropagation">
            <span tabindex="0" class="@IconClassname">
                <input id="@($"static-radio-{_elementId}")" tabindex="-1" @attributes="UserAttributes" type="radio" role="radio"
                       class="mud-radio-input" checked="@IsChecked" name="@ParentGroup?.Name" disabled="@GetDisabledState()" value="@Value"
                       aria-checked="@(IsChecked.ToString().ToLower())" aria-disabled="@(GetDisabledState().ToString().ToLower())" @onclick:preventDefault="@GetReadOnlyState()" />
                <MudIcon id="@($"radio-svg-{_elementId}")" Disabled="@Disabled" Icon="@(IsChecked ? CheckedIcon : UncheckedIcon)" Color="HasErrors ? Color.Error : Color.Inherit" Size="@Size" />
            </span>
            @if (!string.IsNullOrEmpty(Label))
            {
                <MudText Color="HasErrors ? Color.Error : Color.Inherit">@Label</MudText>
            }
            @if (ChildContent is not null)
            {
                <MudText Color="HasErrors ? Color.Error : Color.Inherit">
                    @ChildContent
                </MudText>
            }
        </label>
    </InputContent>
</MudInputControl>

@code {
    [CascadingParameter]
    private MudStaticRadioGroup<T>? ParentGroup { get; set; }

    private bool IsChecked => ParentGroup is not null && EqualityComparer<T>.Default.Equals(ParentGroup.Value, Value);

    private readonly string _elementId = Guid.NewGuid().ToString()[..8];

    protected override void OnInitialized()
    {
        if (ParentGroup is null)
        {
            throw new InvalidOperationException($"{nameof(MudStaticRadio<T>)} must be used inside a {nameof(MudStaticRadioGroup<T>)}");
        }

        base.OnInitialized();
    }

    protected override void OnParametersSet()
    {
        if (UserAttributes is null)
        {
            UserAttributes = new Dictionary<string, object?>();
        }

        UserAttributes["data-static-component"] = true;

        base.OnParametersSet();
    }
}

<script>
    (function() {
        const radio = document.getElementById('static-radio-@_elementId');
        const svg = document.getElementById('radio-svg-@_elementId');

        const checkedIcon = '@(CheckedIcon)';
        const uncheckedIcon = '@(UncheckedIcon)';

        if (radio && svg) {
            const handleChange = () => {
                svg.innerHTML = radio.checked ? checkedIcon : uncheckedIcon;
            };

            radio.addEventListener('change', handleChange);

            document.addEventListener('change', (e) => {
                if (e.target.type === 'radio' && e.target.name === radio.name && e.target !== radio) {
                    handleChange();
                }
            });
        }
    })();
</script>
