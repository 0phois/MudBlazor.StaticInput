@namespace MudBlazor.StaticInput
@typeparam T

@inherits MudTextField<T>

@{
    base.BuildRenderTree(__builder);
}

@code {
    /// <summary>
    ///     The name of the JavaScript function that will be invoked when the adornment (button) inside this <see cref="MudStaticTextField{T}"/> is clicked
    /// </summary>
    /// <remarks>
    /// <term>Parameters</term>
    /// <description>(required)</description>
    /// <list type="bullet">
    ///     <item>
    ///         <term>inputElement</term>
    ///         <description>The input element associated with the <see cref="MudStaticTextField{T}"/>.</description>
    ///     </item>
    ///     <item>
    ///         <term>eventTrigger</term>
    ///         <description>The button element (adornment button) that triggered the event.</description>
    ///     </item>
    /// </list>
    /// <example>
    ///     Example: Setting the AdornmentClickFunction to "showPassword" executes the 'showPassword' function when clicked.    
    /// <code>
    /// -------------------------------------------------
    /// MudStaticTextField @bind-Value="@Input.Password" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Outlined.Lock"
    ///                    AdornmentClickFunction="showPassword" InputType="InputType.Password" For="() => Input.Password"
    /// -------------------------------------------------
    /// </code>
    /// <code>
    ///    let timeoutId;
    ///
    ///    function showPassword(inputElement, button) {
    ///        if (inputElement.type === 'password') {
    ///            inputElement.type = 'text';
    ///            clearTimeout(timeoutId);
    ///            timeoutId = setTimeout(function () {
    ///                inputElement.type = 'password';
    ///            }, 5000);
    ///        } else {
    ///            inputElement.type = 'password';
    ///            clearTimeout(timeoutId);
    ///        }
    ///    }
    /// </code>
    /// ------------------------------------------------------------------------
    /// </example>
    /// </remarks>
    [Parameter] public string? AdornmentClickFunction { get; set; }
    [Parameter] public Expression<Func<string>>? ValueExpression { get; set; }

    private string _name = string.Empty;
    private string _elementId = string.Empty;
    private bool HasDefaultContent => ShrinkLabel || 
                                      HasNativeHtmlPlaceholder() ||
                                      Adornment == Adornment.Start || 
                                      !string.IsNullOrWhiteSpace(Placeholder);

    protected override void OnParametersSet()
    {
        UserAttributes["data-static-component"] = true;
        UserAttributes["data-static-id"] = _elementId;
        UserAttributes["name"] = _name;

        if (AdornmentClickFunction is not null)
        {
            base.OnAdornmentClick = EventCallback.Factory.Create<MouseEventArgs>(this, () => null!);
        }
        
        base.OnParametersSet();
    }

    protected override void OnInitialized()
    {
        _elementId = Guid.NewGuid().ToString()[..8];

        var expression = ValueExpression?.ToString();

        if (!string.IsNullOrEmpty(expression))
        {
            var index = expression.LastIndexOf(").", StringComparison.Ordinal);

            if (index > 0)
            {
                _name = expression[(index + 2)..];       
            }
        }

        base.OnInitialized();
    }

    private bool HasNativeHtmlPlaceholder()
    {
        return InputType is InputType.Color or 
               InputType.DateTimeLocal or
               InputType.Date or
               InputType.Month or 
               InputType.Week or
               InputType.Time;
    }
}

<script>
    (function () {
        const inputElement = document.querySelector('[data-static-id="@_elementId"]');
        const shrinkLabel = @HasDefaultContent.ToString().ToLower();
        const showOnFocus = @HelperTextOnFocus.ToString().ToLower();
        const onAdornmentClick = '@AdornmentClickFunction';

        if (inputElement && (!shrinkLabel || showOnFocus)) {
            const parentElement = inputElement.closest(".mud-input-control");
            const helperElement = parentElement ? parentElement.querySelector(".me-auto") : null;

            if (showOnFocus && helperElement) {
                helperElement.style.visibility = "hidden";

                inputElement.addEventListener('focus', function () {
                    helperElement.style.visibility = "visible";
                });
            }

            inputElement.addEventListener('blur', function (event) {
                if (!shrinkLabel) {
                    const emptyValue = event.target.value.length === 0;
                    const targetParent = event.target.parentElement;

                    targetParent.classList.toggle("mud-shrink", !emptyValue);
                }

                if (showOnFocus && helperElement) {
                    helperElement.style.visibility = "hidden";
                }
            });
        }

        if (onAdornmentClick && onAdornmentClick.trim().length > 0) 
        {
            const inputControl = inputElement.closest(".mud-input-control");
            const buttonElement = inputControl.querySelector('button');

            if (buttonElement) {
                buttonElement.addEventListener('click', function (event) {
                    if (typeof window[onAdornmentClick] === 'function') {
                        window[onAdornmentClick](inputElement, event.target);
                    }
                });
            }
        }
    })();
</script>