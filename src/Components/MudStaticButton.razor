@namespace MudBlazor.StaticInput

@inherits MudButton

@if (FormAction == FormAction.Post)
{
    <form action="@SubmitUrl" method="post">
        <AntiforgeryToken />

        @RenderButton()
        @RenderHiddenReturnUrl()
    </form>
}
else
{
    @RenderButton()
    @RenderHiddenReturnUrl()
}

@code {

    /// <summary>
    ///     The type of action the button performs in relation to form data (submit or reset).
    /// </summary>
    [Parameter] public FormAction FormAction { get; set; } = FormAction.Submit;

    /// <summary>
    ///     The page to redirect the user to.
    /// </summary>
    [Parameter] public string ReturnUrl { get; set; } = string.Empty;

    /// <summary>
    ///     Where to send the data when the button is clicked.
    /// </summary>
    [Parameter] public string SubmitUrl { get; set; } = string.Empty;

    private string GetButtonType() => FormAction switch
    {
        FormAction.Submit => ButtonType.Submit.ToDescriptionString(),
        FormAction.Reset => ButtonType.Reset.ToDescriptionString(),
        _ => ButtonType.Submit.ToDescriptionString()
    };

    private RenderFragment RenderButton() 
    {
        return@<button type="@GetButtonType()" disabled="@GetDisabledState()" class="@Classname" style="@Style" @attributes="@UserAttributes">
                    <span class="mud-button-label">
                        @if (!string.IsNullOrWhiteSpace(StartIcon))
                        {
                            <span class="@StartIconClass">
                                <MudIcon Icon="@StartIcon" Size="@(IconSize ?? Size)" Color="@IconColor"/>
                            </span>
                        }
                        @ChildContent
                        @if (!string.IsNullOrWhiteSpace(EndIcon))
                        {
                            <span class="@EndIconClass">
                                <MudIcon Icon="@EndIcon" Size="@(IconSize ?? Size)" Color="@IconColor"/>
                            </span>
                        }
                    </span>
                </button>;
    }

    private RenderFragment RenderHiddenReturnUrl()
    {
        if (!string.IsNullOrEmpty(ReturnUrl))
        {
            return@<input type="hidden" name="ReturnUrl" value="@ReturnUrl" />;
        }
        return null;
    }
}