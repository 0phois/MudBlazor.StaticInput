@namespace MudBlazor.StaticInput
@using MudBlazor.Interfaces

@typeparam T
@inherits MudRadioGroup<T>

<MudInputControl Class="@Classname" Style="@Style" Error="@HasErrors" ErrorText="@GetErrorText()" Required="@Required">
    <InputContent>
        <CascadingValue Value="this" IsFixed="false">
            <CascadingValue TValue="IForm" Value="null">
                <CascadingValue TValue="bool" Name="ParentDisabled" Value="@GetDisabledState()">
                    <CascadingValue TValue="bool" Name="ParentReadOnly" Value="@GetReadOnlyState()">
                        <div role="radiogroup" @attributes="UserAttributes" class="@GetInputClass()" style="@InputStyle" required="@Required" 
                             aria-required="@Required.ToString().ToLowerInvariant()">
                            @ChildContent
                        </div>
                    </CascadingValue>
                </CascadingValue>
            </CascadingValue>
        </CascadingValue>
    </InputContent>
</MudInputControl>

@code {
    [CascadingParameter(Name = "ParentDisabled")]
    private bool ParentIsDisabled { get; set; }

    [CascadingParameter(Name = "ParentReadOnly")]
    private bool ParentIsReadOnly { get; set; }

    [Parameter]
    public Expression<Func<T?>>? ValueExpression { get; set; }

    public string GroupName { get; private set; } = Guid.NewGuid().ToString();

    protected override void OnInitialized()
    {
        if (For is not null)
        {
            string expression = For.ToString();
            int index = expression.LastIndexOf(").", StringComparison.Ordinal);

            if (index > 0)
            {
                GroupName = expression[(index + 2)..];
            }
        }
        else
        {
            GroupName = Guid.NewGuid().ToString();
        }

        base.OnInitialized();
    }
}
