@namespace MudBlazor.StaticInput
@using MudBlazor.Interfaces

@typeparam T
@inherits MudRadioGroup<T>

<MudInputControl Class="@Classname" Style="@Style" Error="@HasErrors" ErrorText="@GetErrorText()" Required="@Required">
    <InputContent>
        <CascadingValue Value="this" IsFixed="false">
            <CascadingValue TValue="IForm" Value="null">
                <CascadingValue TValue="bool" Name="ParentDisabled" Value="@GetDisabledState()">
                    <CascadingValue TValue="bool" Name="ParentReadOnly" Value="@GetReadOnlyState()">
                        <div id="@($"static-radio-group-{_elementId}")" role="radiogroup" @attributes="UserAttributes" class="@GetInputClass()" 
                             style="@InputStyle" required="@Required" aria-required="@Required.ToString().ToLowerInvariant()">
                            <input type="hidden" id="@($"empty-radio-{_elementId}")" name="@(_valueSelected ? "" : GroupName)" value="@SelectedValue" />

                            @ChildContent
                        </div>
                    </CascadingValue>
                </CascadingValue>
            </CascadingValue>
        </CascadingValue>
    </InputContent>
</MudInputControl>

@code {
    [CascadingParameter(Name = "ParentDisabled")]
    private bool ParentIsDisabled { get; set; }

    [CascadingParameter(Name = "ParentReadOnly")]
    private bool ParentIsReadOnly { get; set; }

    [Parameter] 
    public Expression<Func<T?>>? ValueExpression { get; set; }

    /// <summary>
    /// The color to use when in an checked state
    /// </summary>
    [Parameter]
    public Color? Color { get; set; }

    /// <summary>
    /// The color to use when in an unchecked state
    /// </summary>
    [Parameter]
    public Color? UncheckedColor { get; set; }

    // /// <summary>
    // ///     The icon displayed when in a checked state.
    // /// </summary>
    [Parameter]
    public string? CheckedIcon { get; set; }

    // /// <summary>
    // ///     The icon displayed when in an unchecked state.
    // /// </summary>
    [Parameter]
    public string? UncheckedIcon { get; set; }

    public string GroupName { get; set; } = string.Empty;
    public T? SelectedValue { get; set; }

    private bool _valueSelected;
    private readonly string _elementId = Guid.NewGuid().ToString()[..8];

    protected override void OnInitialized()
    {
        if (ValueExpression is not null)
        {
            var expression = ValueExpression.ToString();
            var index = expression.LastIndexOf(").", StringComparison.Ordinal);

            if (index > 0)
            {
                GroupName = expression[(index + 2)..];
            }

            var compiledExpression = ValueExpression!.Compile();

            SelectedValue = compiledExpression();
            _valueSelected = SelectedValue is not null;
        }

        base.OnInitialized();
    }
}
