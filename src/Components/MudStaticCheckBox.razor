@namespace MudBlazor.StaticInput

@inherits MudCheckBox<bool>

<MudInputControl Class="@Classname" Style="@Style" Error="@HasErrors" ErrorText="@GetErrorText()" Required="@Required">
    <InputContent>
        <label class="@LabelClassname" id="@($"checkbox-container-{_elementId}")" @onclick:stopPropagation="@StopClickPropagation">
            <span tabindex="0" class="@CheckBoxClassname">
                <input type="hidden" id="@($"empty-checkbox-{_elementId}")" name="@_name" value="False" />
                <input tabindex="-1" @attributes="@UserAttributes" type="checkbox" class="mud-checkbox-input" value="True"
                       aria-checked="@((BoolValue == true).ToString().ToLower())" aria-readonly="@(GetDisabledState().ToString().ToLower())"
                       id="@($"static-checkbox-{_elementId}")" disabled="@GetDisabledState()" @onclick:preventDefault="@GetReadOnlyState()"/>
                <MudIcon Icon="@CheckedIcon" Color="HasErrors ? Color.Error : this.Color" Size="@Size"
                         id="@($"check-icon-{_elementId}")" style="display: none;"/>
                <MudIcon Icon="@UncheckedIcon" Color="HasErrors ? Color.Error : this.UncheckedColor ?? Color.Inherit" Size="@Size"
                         id="@($"unchecked-icon-{_elementId}")"/>
            </span>
            @if (!string.IsNullOrEmpty(Label))
            {
                <MudText Color="HasErrors ? Color.Error : Color.Inherit">@Label</MudText>
            }
            @if (ChildContent is not null)
            {
                <MudText Color="HasErrors ? Color.Error : Color.Inherit">
                    @ChildContent
                </MudText>
            }
        </label>
    </InputContent>
</MudInputControl>

@code {
    [Parameter] public Expression<Func<bool>>? ValueExpression { get; set; }

    private string _name = string.Empty;
    private readonly string _elementId = Guid.NewGuid().ToString()[..8];

    protected override void OnParametersSet()
    {
        UserAttributes["data-static-component"] = true;

        base.OnParametersSet();
    }

    protected override void OnInitialized()
    {
        var expression = ValueExpression?.ToString();

        if (!string.IsNullOrEmpty(expression))
        {
            var index = expression.LastIndexOf(").", StringComparison.Ordinal);

            if (index > 0)
            {
                _name = expression[(index + 2)..];
            }
        }

        base.OnInitialized();
    }
}

<script>
    (function () {
        const checkbox = document.getElementById('static-checkbox-@_elementId');
        const emptyCheckbox = document.getElementById('empty-checkbox-@_elementId');
        const checkedIcon = document.getElementById('check-icon-@_elementId');
        const uncheckedIcon = document.getElementById('unchecked-icon-@_elementId');

        checkbox.addEventListener('change', () => {
            checkbox.ariaChecked = checkbox.checked ? "true" : "false";
            checkedIcon.style.display = checkbox.checked ? 'block' : 'none';
            uncheckedIcon.style.display = checkbox.checked ? 'none' : 'block';

            if (checkbox.checked) {
                emptyCheckbox.removeAttribute("name");
                checkbox.setAttribute("name", "@_name");
            }
            else {
                checkbox.removeAttribute("name");
                emptyCheckbox.setAttribute("name", "@_name");
            }
        });
    })();
</script>
